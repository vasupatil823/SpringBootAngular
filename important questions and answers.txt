
>> Tell me about yourself :

- First of all thanks to the interviewer to give the opportunity or to schedule this interview.
- Tell your name and about your graduation and describe yourself as below
- I am a software engineer and have a ----- years of experience
- What are the various technologies you have worked on and on what latest technologies you have worked recently.
- Tell about the current company domain and total different domain you have currently worked. (like banking domain, healthcare domain)
- tell about in what are you are best. like integrating or using third party api or libraries in the existing application or using them and provide some examples you have implemented. and tell some achievements.
- what was your role and how it changed over the years. what is your current role in your company.
- review the JD well and answer how you are fit for this role and their requirement. for ex. the requirement is for kafka then tell about your experience in kafka and other things which aligns with their requirement.


>> why HashSet is so important data structure ? : because it takes same time for adding,searching and removing the objects so its time complexity.

>> In java we implement the hashmap with use of array of linked list. means hashmap internally uses array and linked list.

bucket : any index of array contains linkedlist is called one bucket.

meaning of hashing : means to change the form of data. for example we have a data as a,b,c and the hash value of this data will be something like 2586.

and best implementation of hashing is everytime we provide value to hashing method. it should give a same result.

there are different hashing algorithmn like sha1, sha256.

>> Reverse a linkedlist

>> Explain some exceptions : 

- ArrayIndexOutOfBoundsException :
- NullPointerException
- StackOverflowError : this is the child class of virtual machine error, vme is a child class of Error and Error is a child class of Trowable. whenever we are performing recursive method call, one entry going to store in the stack, when the entries in stack gets overflow then we get this error. 
- ClassCastException : while performing type casting when jvm gets any issue at runtime then this exception is thrown.

3 rules of object casting as below :

  A b = (C) d;

  rule 1) (At compile time) the type of 'd' and 'C' must have relationship (either parent to child or child to parent or same type), otherwise we will get the compile time error.

  rule 2) (At compile time) 'C' must be either same or derived type of 'A', otherwise we will get the compile time error.

  rule 3) (At runtime) the underlined original object of 'd' must be either same or derived type of 'C', otherwise we will get the run time exception called cast cast exception  



- NoClassDefFoundError : child class od linkage error.when the JVM looks for any class file and that is not avsilable at runtime then we get this error.

- ExceptionInInitialzerError : while initializing static variable or while initializing static block if any problem occured to JVM then this exception is raised.

- IllegleArgumentException : 
- NumberFormatException : 
- IllegleStateException : 
- AsertionErrorn : when assert statement fails then we get the AssertionError.

Two new features came as a part of java 1.7
1) try with resource
2) multi-catch block


>> Java 8 new features :: 

- Lambda expressions : it is anonymous function




- Functional Interfaces
- Default methods and static methods
- Predefined Functional Interfaces
  Predicate
  Function
  Consumer
  Supplier
  etc..
- Double Colon Operator (::)
  Method reference
  constructor reference
- Streams
- Date and Time API
- Optional Classes
- Nashron Javascript Engine
etc..


> When we want to compaire two alphabatical string we use compaireTo method, below is the example

string1.compaireTo(string2)


> interface static methods by default not available to the implementation class.


> String, StringBuffer and StringBuilder questions.

1. diff bet string and stringbuffer
2. what is mutable and immutable ?
3. == vs .eqauls() method in String and StringBuffer
4. what is SCP (string constant pool)
5. importance of SCP memory area.
6. why SCP concept is available only for string and not for stringbuffer.
7. why string objects are immutable and stringbuffer is mutable ?
8. in addition to string object is there any other object that is immutable in java
9. how to create our own immutable class
10. final vs immutability
11. Need to stringbuilder and differences with stringbuffer

> OOPS :

1. when the object creation of class is not possible.
2. when the child class creation is not possible.
3. what are the various modifiers available for the top level classes.
4. which modifiers are allowed for classes inside the top level classes.
5. use of abstract modifier and where we can use the abstract keyword
6. Abstract class vs abstract method
7. what is the advantage of taking method as abstract ?
8. member modifiers
9. Data hiding
10. Abstraction
11. Encapsulation
12. ingeritance
13. Advantages of inheritance
14. Types of inheritances
15. Multiple inheritance.
16. diamond access problem or ambiguity problem
17. while diamond access problem or ambiguity problem does not occur in case of interfaces
18. why ambiguity or DAP does not occur for default and static methods in interfaces.
19. cyclic inheritance.
20. what is method overloading
21. in overloading when the method resolution is done.
22. what is compile time polymorphism or static polymorphism or early binding.
23. what is automatic promotion in overloading
24. what is overriding
25. what is runtime polymorphism or dynamic polymorphism or late binding
26. overrind rule until 1.4 and after 1.4
27. what is covarient return type in overriding
28. where cobarient is allowed
29. Overriding rules related to method signature, return type and modifier
30. Java -source p.java
31. Overriding rules for access modifiers
32. overriding rules for throws keyword.
33. overriding rules for static methods and what is method hiding
34. diff between method hinding and overriding
35. Overrding rules for var args methods.
36. overriding wrt variables and how the variable resolution is done.
37. what is variable hiding or shadowing
38. diff between overloading and overriding.
39. what is polymorphism
40. Three pillors of OOPS (Encapsulation,Inheritance,Polymorphism)
41. what is object type casting and its important 3 rules
42. when we get the classcastexception
43. internal things of Object Type Casting
44. because of type casting, internally a new object will be created or not ?



>> Streams :: 

1. why and how we use the stream for collection object.
2. what is filter()
3. what is map(),collect(), count(),sorted(), min(), max(), get(), forEach(), toArray(),Stream.of()
4. where we can use the streams concept.


>> java.util.concurrent package


>> JVM Archetecture :

1. what is virtual machine
2. how many types of virtual machine is there.
3. basic archetecture diagram of JVM
3. what is class loader subsystem
4. Types of class loaders
5. how java class loader works
6. Need of customized class loader
7. provide code to define customize class loader
8. Various memory areas of the jvm
9. program to display heap memory statistics
10. how to set maximum and minimum memory heap size.
12. Execution engine
13. Java native Interfaces
14. class file structure
15. what is JVM. where it is available.
16. what is the work of JVM
17. Components of JVM and what is the work of each component.



>> Spring Framework

. Spring Core components
. Spring context
. Spring AOP
. spring DAO
. what is IOC
. what are the factory classes, for example DriverManager
. how many types of IOC are there
. what is dependency lookup and dependecy injection
. types of dependency injection
. what is spring bean configuration file. 
. what is BeanFactory and uses of it.
. how to create the IOC container using BeanFactory
. what is cyclic dependency
. resolving or mapping constructor argument
. what is collection inhjection
. how many types of collection spring supports for ingection.
. how use the configuration in xml for collection object. and what is util namespace.
. what is bean inheritance and its uses.
. use of abstract element in bean configuration.
. what is collection merging
. what is inner beans
. what is diff between ref and idref
. what is bean aliasing
. what is Null String
. Bean Scopes
. what is singleton class and when to make the class as singleton
. what is bean autowiring and how many ways we can enable it ?
. what is nested bean factories
. what is P and C namespaces
. what is dependency check and @Required annotation
. what is Depends on.
. what is Bean Lifecycle and how can we define it in spring, approaches.
. how to define object initialization and object destroy logic in spring bean configuration file.
. Declarative approach, programattic approach and annotation approach of bean life cycle.
. what is Aware Interfaces
. static factory method
. instance factory method
. what is ServiceLocator's
. what is factory Bean
. what is method replacement
. lookup method injection
. lookup method injection.
. property editors.
. internationalization.
. diff between ApplicationContext and BeanFactory
. what is bean post processor.
. what is beanfactorypostprocessor and propertyplaceholderconfigurar.
. what is event processing.
. Annotations @Configuration and @Bean, @Required, @Autowired
. stereotype annotations @Component, @Repository, @Service, @Controller
. Spring java config annotations, @Inject, @Named, @Resource, @PostConstruct and @PreDestroy
. how many ways we can use @Autowire, @Qualifier
. Spring AOP, what are the AOP principles.
. how many ways we can work with Aop.
. types of advices.
. what is dispatcherServlet and what it holds.
. what is ApplicationContext and what it holds.
. what is Controller
. what is Validator
. what is handler mapping
. what are handler interceptorss
. what is view resolver.

>> Design Patterns :

. Strategy pattern (design principle spring recommends)
. when we should go for inheritance and when we should go for composition


>> Spring boot

. Spring boot runners
. Anonymous inner class
. how many ways we can read the applicarion.properties in spring boot.
. what is the diff between @ConfigurationProperties and @Value
. Spring boot profiles
. dependency management in spring boot
. dependency scopes
. version management sysstem in spring boot
. spring boot starter classes and use of starter class
. Spring boot Data JPA and what fearures it supports
. what is @Repository interface
. JPA query methods and @Query Annotation and special parameters/Return types
. what is the rule of defining primary key in Entity class
. @Modifying and @Transaction annotationS
. what is projection and types of projections in JPA
. special type of Query methods
. connection pooling in spring boot data
. spring boot mongo db support.
. what is AutoConfiguration and what things it takes care of that is no need to done by programmer.
. what is data rendering
. which are the spring provided containers
. where to place html, css, js files in spring boot application
. what is diff between Model(I) and ModelMap(C)
. @RequestMapping, @EnableWebMvc, @ComponentScan, @PropertySource, @Entity, @Data, @ModelAttribute, @RequestParam annotation
. Cache Management in spring boot, @EnableCaching, @Cacheable, @CacheEvict, @CachePut annotations
. Lombok api
. Logging using spring boot
. Spring boot email
. Spring boot batch processing (@EnableBatchProcessing,ItemReader<?>, ItemProcessor<?,?>, ItemWriter<?>)
. Spring boot rest
. how many types of methods rest controller supports, @RestController, @RequestMapping
. Annotations to provide Inputs to Request Methods in RestController.
. Response filtering
. Monitoring API with actuators and how to configure it.
. Spring boot API Explorerl with HAL Explorer
. Spring boot security, what is CSRF


TYPE            Annotation

url?key=val     @RequestParam
/url/val/       @PathVariable
/url/key=val    @MatrixVariable
Http Header     @RequestHeader
Http Body       @RequestBody

. how dispatcher servlet is configured in spring boot and to which url pattern it mapped.@PropertySource.
. server.servlet.context-path property in spring boot.
. where http request sends data.
. spring boot enables json conversion by default

Path Variable [Path Parameters]:--
=>We can send data using URL (path).
=>It supports only Primitive Data.
Paths are two types:--
a.>Static Path [format:/url]
b.>Dynamic Path [format:/{key}]

. media type conversion annotations
. enable swagger ui in spring boot application



>> Hibernate :

. what is ORM
. why we use hibernate
. what is relation between JPA and hibernate
. what is the problem with JDBC and how hibernate solves it. and how hibernate solves exception handling problem.
. how jdbc face problem in transaction management
. why dialect is used in hibernate
. what is criteria class in hibernate.
. what is caching in hibernate
. how version feature works in hibernate and what is TimeStamp in hibernate
. how transaction management is handled by hibernate and what is local transaction and what is global transaction.
. what is entity relationships and types of relationship
. what is unidirectional mapping and bidirectional mapping. what is mappedBy, joinColumn, cascade, fetchType
. what is normalization
. what is session
. what is sessionfactory
. what is hibernate dialect
. why to use DAO for persistance tier layer
. Get vs Load
. rules while creating the entity classes.
. what are hibernate tools.
. hibernate configuration using annotation.
. what are logical mapping annotations and physical mapping annotations.
. hibernate annotations (@Entity, @Table, @Id, @Basic, @Column, @Unique, @UniqueConstraint, @Transient)
. JPA vs Hibernate
. How many levels of cache hibernate supports
. when to use cache and what are the disadvantages
. how the hibernate session is working for cache
. is session object singleton or not ? why ?
. hibernate provided key generator
. Entity lifecycle state (Transient state, Persistent state, Detached state, Removed State)
. Relationship object model
. entity mapping with different collection classes.
. working with bag collection.
. Transaction management in hibernate.
. what is HQL.


>> Design Patterns : 

. what is patterns and what is its use. 
. which are the categories of Gang of four design patterns
. what is singleton design pattern and how to create the singleton class. and provide different best approches to create the sigleton class.
. what is eagar initialization and eagar initialization
. what is the issue with lazy initialization of singleton class object
. what is static block initilization.
. how serialzation and deserialization process breaks the singleton class and how to avoid it. and what is readResolve() method.	
. how and why to override clone method and throw CloneNotSupportedException
. When to use singleton
. what is Factory design pattern and when to use it.
. what is factory method
. what is abstract factory design pattern
. difference between abstractfactory and factorymethods
. what is Template method design pattern.
. what is adapter design pattern.
. what is Flyweight design pattern.
. what is commanddesign pattern.
. Decorator design pattern.
. what is the structure of presentation tier pattern.
. what is intercepting filter design pattern.
. View helper design pattern.
. Front controller design pattern.
. Application controller and what should be the resposibilties of it.
. what is context object.
. which are the Business and Integration tier patterns
. what is DAO (Data access object)
. Business delegates and its uses
. what is the value object and business object.
. what is service locator design pattern
. what is session facade.
. what is jndi and how to configure it.

> Spring Developement to developement process(end to end application process)

part1 : WEB MVC + data JPA + database (SQL)
part2 : UI Design (Bootstrap)
Part#3:- Cache Management.
Part#4:- Email configuration programming.
Part#5:- Logging, UnitTesting and Integration with GIT.
Part#6:- Cloud deployment (PCF =pivotal Cloud foundry).

> Web Services

. what is distributed programming and how java supports it and what are the factors that driving us to web services
. archetecture of webservices
. what is soap and what is structure of soap xml and why it is called application specific protocol
. what is wsdl, what is UDDI, what is consumer and provider,
. what is XML,DTD,
. what are different xml parsers.
. explain JAX-B and why it is used. what is marshelling and unmarshelling.
. what is one time operation and run time operation in JAX-B.
. what is XJC or schemagen
. what is JAX-RPC and JAX-WS
. ways of developing web services
. what is contract first approach.
. what is contract last approach.
. what is endpoint
. what is message exchange pattern.
. what is synchrnous request reply
. what is Asynchrnous request/reply or delayed Response
. Message exchange formats.
. how to create the provider and what are the steps.
. what is SEI interface and what are the rules for writing it.
. what is Remote interface.
. what type of parameters SEI interface methods should take and what types of values they should return.
. what is RemoteException and who should handle it.
. what is wscompile tool and how to use it.
. what is Wsdeploy tool.
. why we need to generate the binding classes.
. how the cosumer sends the request and how it is received and processed by provider.
. what is jaxrpc-ri.xml 
. what is Request processing flow.
. how to create the cosumer.
. what are the different elements in wsdl.
. what is soap and what are its parts in xml.
. what is soap namespace
. what is soap header and soap body.
. what is soap fault element
. what is apache axis
>> Restfull webservices
. what are the principles of rest
. what is idempotent methods
. what is hateoas
. prepare the rest webservices using Jercy and jboss if asked.
. features of rest web services
. how many ways we can create rest web services, like jercy, resteasy, spring boot, spark, jax-rs api.
. different annotations to build the rest web service using resteasy (@Path, @Produces, @GET,@POST, @QueryParam)
. different annotation to create the rest webservice using jercy framework(@ApplicationPath, @Peoduces, @Consumes, @PathParam, @MatrixParam)
. header parameters (@HeaderParam)
. Form Parameters (@FormParam)
. Bean parameters
. Content handlers
. Custom content handlers
. Complex responses
. Exception handling
. Async server and client
. Caching
. Security
. Spring boot restfull webservices
. @RestController Annotation (@RequestParam, @PathVariable (static path, dynamic path),@RequestHeader, @RequestBody)
. How many types of input data RestController can take
. Advanced rest api features
. versioning rest api
. different factors to consider when you version the API


------------------- Microservices -----------------

. what is microservice
. microservice challenges
. what is spring cloud config server and how it is usefull for configuration management
. what is Eureka naming server and how it is used for dynamic scale up and scale down and what is service registration and service discovery
. Spring cloud load balancer for load distribution, what is Feign and Ribbon
. what is Zipkin for visibility and monitoring and what is netflix api gateway.
. what is Zuul, Spring cloud gateway
. what is Hystrix, Resilience4 for fault tolerence
. Docker for deployment
. Kubernetes for cloud deployment.
. challenges with microservices and what is the solution to over come the challenge
. what is centralized configuration for microservices and how it is configure. and where we keep the configuration.
. which dependency we need to add in while creating microservices project.
. how to create the spring cloud config server and which dependecies are required.
. how to configure to pick the values from git repository in spring cloud config server
. what is @EnableConfigServer anotation
. how to configure the  multiple environments in git repo for spring cloud config server
. how to connect the microservice to spring cloud config server
. what is the bootstrap.properties and why it is used.
. what is the use of RestTemplete.
. what are the problems with resttemplate and how feign rest service client solves it. and what is @EnableFeignClients.
. how to configure and use  the feign rest service client. and what is the feign proxy, @FeignClient annotation
. how to setting up client side load balancing using ribbon. @RibbonClient. ribbon deprecated and the latest one is spring cloud client side load balancer
. what is eureka naming server and what is the use of it.
. how to setting up eureka naming server and what are the dependencies are required. @EnableEurekaServer, @EnableDiscoveryClient.
. how to using eureka naming server with spring cloud load balancer.
. What are the common features those need to be implement in every microservice. and how to implement those at the level of API Gateway.
. how to implement Authentication, autherization and security at the level of API gateway
. what is rate limit and how to implement Rate Limits at the level of API gateway
. what fault tolerence and how to implement it at the level of API gateway
. which are the various api gateways we can implement. like Zuul API Gateway, Spring Cloud Gateway and how to implement its.
. What are the other features of spring cloud api gateway
. what is circuit breaker. like Resilience4j and how to implement it. and how it works,@Retry,@CircuitBreaker
. what is Rate Limiting and BulkHead feature.@RateLimiter,@Bulkhead
. what is docker and how to deploy the microservice in it.




>> Docker :: 

docker is an open platform for developing, running and shipping applications.
docker is an platform which packages an application and all its dependencies together in the form of containers.
. what problem docker solved ? 
. what is docker engine
. what is docker file, image and container.
  dockerfile is a text file that contains all the commands that use can call on the command line to assemble the image.
  docker image is a template to create the docker container.
  docker container is a running instance of a docker image, container holds entire package to run the application.
. important docker commands.
  docker pull <image name>
  docker search <image name>
  docker images
  to run the container in detached mode and keep it continue running the command is (docker run --name <anyname> -it -d <imagename or id>)
  docker ps (to see the running containers)
  docker exec -it <containerid> <imageversion(for example jdk8)>
  docker rm <containername or id>   (remove the container)
  docker rmi <imagename>
  docker restart <containername or id>
  
> creating image and push the local images to docker hub.
  1) create docker file with name 'Dockerfile'
  2) execute the command to build the image as 'docker build -t myubuntuimage .'
  3) check images came or not. if came, run the image
  .. commands
  docker login
  docker commit
  docker push
  docker copy
  docker logs <containername>
  docker volume
  docker logout
  
> Creating image for spring boot project
  create the jar or war file of the project
  create the new folder for creating image
  put our jar or war file in that folder
  create the dockerfile
  build the image
  afeter the images is created run the image
  sample working image is creaed on path D:\projects\docker projects\spring boot docker image
  
>> Application deployment using docker
   what is docker compose tool and how to use it as below
   create the jar file and keep in one folder.
   create the new docker file.
   and for database configuration create new docker compose file as created on D:\projects\docker projects\docker compose
   after creating the yaml file run the below command on above path
   docker-compose up
   . if we got any error regarding database connection, then we need to add the networks configuration as below in both appservice and dbservice
   networks:
      - bootnetwork  #any name




>> Junit and Mackito :
   what is unit testing
   Junit5
   different junit annotations
   what is assertion and how to use it and junit testing
   @Test, assertThat,@Disable,@AfterForEach,@BeforeForEach.
   what is mockito and when to use it and how to use it.
   @Mock annotation, @ExtendWith(MockitoExtension.class), MockitoAnnotations.openMocks
   
   
>> CI CD pipeline using Jenkins :
   . Jenkins automates the build and deployment process
   . there are multiple environments like dev, test, qa, production
   . dev environment is where multiple developers merge there codes and then integration testing is done of the project.
   . QA environment is where QA testers perform the testing.
   . UAT environment is where the testing is performed by the end users who validate the software from the users's perspective. and ensure that the software meets their requirement and expectations before go live.
   . Pilot testing (preproduction environment) where the performance testing is done.
   . production environment is where the project is going live
   . what is CI/CD pipeline : continous intergration and continous delievery/deplloyment.
     all the processes are automated from identifying the commit and test and deployment to different environment. there is only one process which is manual is deployment to production. when the button will be click then only the build will be deployed to production.
   . implement the CI CD pipeline using jenkins
   . download the jenkins war file and run it as java-jar jenkins.war
   . jenkins password for login to ui: 73c9445dbe0743f3aff085f64b50e9aa
   . install the required plugins and create the first admin user
   . after installation to install the plugin in jenkins we can install in manage jenkis and plugins tab
   . deploy to container plugin for deploying the war file to container.
   . for configuration go to the Tools.
   . for deploying the web application using jenkins we need to confgure it. in jenkinswebb application for example the configuration is created in local jenkins.
   . configuring jenins on cloud.
   
>> which are the automated code review tools.
   . SonarQube
   
>> Generics in java : 
   . purpose of generarics
     Type safety : 
	             for example arrays are type safe
				 and collection objects are not type safe
				 for type safety arrays are there what is the need of generics ?
				     because arrays are type safe but are not growable as they are fixed in size. so provide the type safety to the collection objects the generics are introduced.
	 to resolve type casting problems : 
	                                  type casting is not mandatory in arrays but in collection it is mandatory.
	
	So to overcome above both problems in collections generics is introduced in java 1.5 version. so the main perpose of generics are provide the type safety and also to resolve the type casting problems.
	. Generic classes : 
	                  
    . how to define our own generic class.
	. Bounded Types : how to bound the type parameter up to the perticular range. :
	                                                               using extends keyword
	. What is generic method and wildcard character			

>> Concurrent collection : 
   . Need of concurrent collection. how it is different from regular collections. there are below 3 major reasons.
     1) most the classes are not thread safe. so there is a chance of data inconsitency.
     2) there are some classes which are thrad safe and also we can make the non thread safe classes as thread safe using collections utility classes. which is performance issue.
     3) we get the concurrent modification exception when two threads are working on same collection class object and one of thead is iterating over the collection and other one is modifying the same object then the iterator fails.
   . concurrent collection is a thread safe.
   . relatively performance is high.
   . and concurrent collection never throw CMException.
   . what are different concurrent collection classes.
   . what is concurrentMap and its methods are putIfAbsent, remove, replace and how these methods are diff from regular methods.
     1) ConcurrentHashMap : what is the different locking mechanism used by CCHM to provide concurrency + performance. it is cucket level lock instead of total hashmap object locking. so the other elements are allowed to operate. at a time 16 thread are allowed to performa update operation and any number of threads are allowed for read operation.
	 2) copyonwritearraylist
	 3) CopyOnWriteArraySet
	 
>> How to make the application secure : 
   . what is diff between authentication and autherization
   . what is OWASP
   . what is jwt authentication
   . what is OAuth 2.0
   . what is CORS
   . Input validation
   . Request and Response Logging
   . data encryption
   . HTTPS
   . Rate Limiting
   . Security Headers
   
>> what are the solid priciples :
   . what is Single Responsibility : 
   . what is open for extension and closed for modification
   . what is Liskov Substitution
   . what is Interface Segregation
   . what is Dependency Inversion
   
>> Large data handling : 
   . Use right data structure.
   . Consider Memory Efficiency: use primitive instead of objects to remove the memory overhead. use datatypes with smaller memory if the data alows.
   . Batch Processing:
   . Parallelism and Concurrency:
   . Database Optimization : Consider denormalization and caching strategies for read-heavy applications.
   . Use Buffering for I/O Operations:
   . Profiling and Monitoring:
   . Use External Storage and Databases:
   
>> How client side validation is done and what are the advantages of it.
   . Instant Feedback
   . Reduced Server Load
   . Faster Response 
   and also there are some limitations as below
   . Security Risk: 
   . Dependence on User's Browser:
>> server side validations and advantages and disadvantages of it. :
   . Security
   . Data Integrity
   Best Practice: It's crucial to perform both client-side and server-side validation for robust data validation. Client-side validation provides a better user experience, while server-side validation ensures the security and integrity of the data. Server-side validation should never be omitted, as it is the final line of defense against invalid or malicious data.
   
>> How we can make sure the data quality
     
   . Data Validation:
	 . Implement Validation Rules
     . Use Regular Expressions:
     . Implement Cross-Field Validation:
   . Data Cleaning : 
     . Remove Duplicates
	 . Handle Missing Values
	 . Standardize Data
	 . Address Inconsistencies:
   . Data Profiling:
     . Profile Your Data:
	 . Identify Outliers
   . Data Monitoring and Auditing:
     . Implement Data Monitoring
	 . Regular Audits
   . Data Governance: 
     . Define Data Standards
	 . Data Stewardship
	 . Data Policies
   . User Training and Awareness:
     . Training
	 . Raise Awareness
   . Automated Data Quality Tools
     . Use Data Quality Tools
	 . Implement Data Quality Checks
   . Data Documentation:
     . Document Metadata
	 . Version Control
   . Feedback Loops:
     . Implement Feedback Loops
   . Continuous Improvement:
     . Continuous Assessment
	 . Data Quality Metrics
	 
	 
>> what type of security attacks are done on software :
   . Malware
   . phishing
   . SQL Injection
   . Cross-Site Scripting (XSS):
   . Cross-Site Request Forgery (CSRF)
   
>> java 8 streams : 
   . if we want to process the elements from the collection then we use the streams
   . stream is created as Stream s = c.stream();
   
   
>> Collections :


>> Spring Security : 







------------------------------------

docker local test commands

docker network create mynetwork

docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=V@su@2911' -p 1401:1433 --name examsqlserver --network examserver_and_mssql_network -d mcr.microsoft.com/mssql/server:2022-latest


docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=V@su@2911" -p 1401:1433 --name examsqlserver  --network examserver_and_mssql_network -d mcr.microsoft.com/mssql/server:2022-latest

docker network connect networkname containername
















---------------------------------------------------------------


initerview preparation as per the resume

Docker,Jenkins,Kubernetes, what is agile, CI/CD pipeline.
what are solid principles.
how you make sure the data quality.
what types of security attacks are done in software.
spring security.
who is business analyst and what is the work of him and how developers works with him.
how you deployed your recent project and where you deployed your recent project.
what was the requirement of Apache storm, jackrabbit, rabbitmq and apache ignite in your project.
how do you handle millions of request in your application.
what is whole process of your application and how it handles such large amount of data.
what is the end to end flow of project developement. and what is your role in it.
how you review the code (SonarQuibe).
how you test your application (junit and mackito).
how you configure metrics,alarms and monitors and manage the workload balancing.
what is load/stress testing, unit/integration/e2e testing.
what is SSL and how it is implemented.
Multithreasing (java.util.concurrent package),collections (concurrent collection), OOPs, String
how you have used the concurrency and parallelism to improve the api performance.
how did you optimize the business logic for core applications.
(what are the steps you followed while migrating from spring to spring boot)
spring,spring boot,JPA
Authentication in project
RestFull webservices
Design patterns
sql server Common queries.
microservices common questions and prepare any two features that implemented.
lambda expressions in jdk 8 and other new features, how to use streams.
Swift MT, iso2022
Jackrabbit.
socket programming
very basic java questions.




---------------------------------------------------------

how you have implemented the multithreading in your application.

what is BlockingQueue and BlockingDqueue
what is Callable interface and how it is diff from runnable interface
what is ConcurrentMap and what are its implementation classes.
what is the diff between HashMap and ConcurrentHashMap.
explain the Executor interface
explain the ExecutorService and what is the role of Future interface in ExecutorService and what is the use of get() method.



--------------------------------------------------------

what is docker
what is docker file
what is container
what are docker image





---------------------  missed questions ------------------

overrding rules
junit and mockito test cases
stream apis
diff between map and flat map
what is the advantages of for each loop and stream apis for each loop



------------------------- Microservices annotations and important tools ----------------

@EnableConfigServer


Spring cloud config server

RestTemplete

Feign Rest Service Client
@EnableFeignClients
feign proxy
@FeignClient

Client side load balancing
Ribbon
@RibbonClient (deprecated)
spring cloud client side load balancer
@LoadBalancerClient

Eureka naming server
service registry
service discovery
@EnableEurekaServer
@EnableDiscoveryClient
@LoadBalanced

Api gateway
Authentication, autherization and security
Rate limit
Fault Tolearation
Service Aggregation
debugging
analytics
Spring cloud gateway
Spring cloud discovery
Actuator
devtools
@EnableDiscoveryClient
GlobalFilter
Building a custom routes
RouteLocator

Fault tolerence
Rate Limiting and BulkHead feature
@CircuitBreaker
@RateLimiter
@Bulkhead

distributed tracing
zipkin


-------------------- cognizant questions -----------------

1. What is the output of below Code.

Employee emp1 = new Employee():
emp1.setId(2):

Employee emp2 = new Employee();
emp2.setId(3)

emp2=emp1

Sysout(emp1):
Sysout(emp2);

2. How you deploy your application.
3. What is docker, jenkins ( in detail how to create jenkins pipeline etc..)
4. Explain microservice archetecture.
5. Explain ExecutorService service (explain in details with example and scenario where you have used it for multithreading).
6. Apache kafka in details. (all the questions from Consumer application)
7. Agile methodology.
8. Explain the projects you have worked on and technologies you have used.
9.Roles and responsibilities in project.
10. Jdk 8 new features and which features you have used.
11. Recently which java version you are using.
12. Explain the Records (new feature in java 14.)
13. What are the new features introduced in java 21.
14. We need to create the api that reads and add the details of employee. Please exaplain how you will create it (what will be the classes from controller to jpa classes)
15. Create sample jpa interface that uses all the features of jpa.
16. Create the jpa entity class that uses all the feaures of jpa with relationships.
17. What is composite primary key and How to create the composite primary key using jpa.





>> Rest API standards
versioning
error handling with custom error and responses means exception handling should be done properly
content negitiation
documentation
we should mentain the statelessness
we should the rest api secure

>> why should we make rest api stateless ?

 
>> exaplin all the application archetecture, like monilithik, microservice, event driven
>> what is the major diff between monolithic archetecture and microservice archetecture

client side load balancing vs server side load balancing in microservice archetecture
what king of libraries you use to achieve the load balancing in spring boot : spring cloud load balancer and ribbon
what is Retry pattern, rate limiter pattern, bulk head pattern
how to idenity which microservice is functining slower : zipkin will give you the statistics for each request and microservice.
how to indenty which microservice is giving you a exception. : there are tools like kibana, splunk, elastic search and etc.. to seach in this tools we need to id of the pertucluar service, that id we will get from the zipkin statictics.


what is Cross-Site Request Forgery (CSRF) Protection





------------------- Apache Kafka ------------------

> why we use apache kafka and what problems it solves ?






------------ Any questions for me ? --------------

i am pretty interested to know about the company culture.
what can i do to prepare myself better for this job if i get selected ?
what is the working modal currently there ? it is a hybrid or wfo ?
what are the training programme available for employees ?

Q. why are you leaving your current organization ?
i am seeking more apportunities to grow professionally and also i am looking for new and different chalenges as well as maintain the work life balance.



>>>> Spring batch processing

what is job ? and what are the steps in job ? Reader, Processor, Writer
what is Job Repository ?
dependency for spring batch ? spring batch
steps to create the batch configuration :
   create the configuration class and create the required beans in it. like Job bean.
   use the JobRepository and JobExecutionListener
   create the steps bean
   use ItemReader implementation classes, like FlatFileItemReader. create the bean of FlatFileItemReader with all the file reading configuration.
   Create Processor bean. need to create the custom processor class that implements the ItemProcessor interface and override the process method.
   create the write bean with all the configuration. there is a ItemWriter interface and its different implementation classes like JDBCitemwriter or jpaitemwriter
   
>> What is PCF (Pivotal Cloud Foundry)?
what is the use ? 



>> What is DNA (Digital Native Architecture) ?


- Explain and draw microservice archetecture

- Sql join queries

- How you write the optimized code, what things you take care while optimization.

- What tools you used currently while developement.

- How you identify the time taking queries and how you optimize it.

- what design considerations you follow while coding.
- what tools you use to identify the code issues.
- how agile methodology is followed in your company.
- how you identify which code issues should be bypassed and which should be fixed.



---------- Agile methodology -------------------
> Advantage of agile : customer no need to wait for the long time to deliever the product or project. and all are working together, like owner,manager,leads and deveelopers and QA to complete the project.
> suppose we are working on customer centric project and you are regularly updating the customer and also the customer also regularly providing the feedback. and based on the feedback you making the large changes. this process is called agile methodology. where the requirement is not fixed and it can be change anytime.
> sprint : spring is a cycle or a time interval. 
> sprint planning : 
> program increment planning (PI) : this is the large version of spring. we can call the quarter to one PI. PI planning is across the multiple teams and spring planning is across the one team.
> Daily standup meeting : scrum master leads this meeting and all are involved in this meeting.
> sprint retrospective meeting : this is done at the end of the spring.
> Story points : it is a one task where we decide time required to complete that task. 1 story point means 1 day in some companies and also 2 story point means 1 day.
> EPIC : large segment of one story point where it cannot be completed within single sprint.
> Scrum master : 
> Zero spring : 
> Spike : 
> Velocity : 
> Agile principles :
  > customer satisfaction - 
  > requirement change at any time - 
  > Collaborative work - 
  > we develope and release the software in a less time span with a few number of features.
  > Scrum team : dev team, QA team, project owner
  > product owner and his responsibility - 
  
Agile flow --  > product owner will collect the requirment from customer or end user or stackholders.
               > he will prepare one product backlog which contains the list of user stories.
			   > spring planning meeting will be done where they will disucss what are the stories or requirement they have to complete in this specific spring.
			   > spring backlog contains the commited user stories those needs to be completed within the sprint.
			   > start of sprint with 1-4 weeks of duration for 1 sprint.
			   > dailly standup
			   > Burndown report is created by scrum master which shows the performance of the team.
			   > sprint review meeting where show the demo to the product owner.
			   > sprint retrospective meeting.
			   
			   
			   
			   
> Docker Swarm :

>> Zensar interview questions.

@Qualifier
multiple inheritance
diamond problem
Explain solid principles
docker
kubernetes
how you monitor your application.
have you used the tools like splunk for monitoring your application.

- write a code for below.

  i have an array of cities, in that i want to find the city which higher number of times in array.
  
  import java.util.HashMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        String[] cities = {"New York", "London", "Paris", "London", "Tokyo", "London", "Paris", "London"};
        String mostFrequentCity = findMostFrequentCity(cities);
        System.out.println("The most frequent city is: " + mostFrequentCity);
    }

    public static String findMostFrequentCity(String[] cities) {
        Map<String, Integer> cityCount = new HashMap<>();

        // Count occurrences of each city
        for (String city : cities) {
            if (cityCount.containsKey(city)) {
                cityCount.put(city, cityCount.get(city) + 1);
            } else {
                cityCount.put(city, 1);
            }
        }

        // Find the city with the highest count
        int maxCount = 0;
        String mostFrequentCity = null;
        for (Map.Entry<String, Integer> entry : cityCount.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                mostFrequentCity = entry.getKey();
            }
        }

        return mostFrequentCity;
    }
}
